Le fichier `app.py` sert de point d'entrée principal pour l'application Flask qui intègre des fonctionnalités 
pour la gestion d'une base de données MongoDB et la manipulation de données d'administrateurs, 
de joueurs, et d'autres opérations communes. Voici un aperçu détaillé de ses composants et de son fonctionnement :

Importations
- Flask : Importe le framework Flask pour créer l'application web.
- connection : Importe la fonction `connection` depuis le module `database.mongoDB`
- admin_routes, common_routes, player_routes : Importe des "blueprints" depuis des modules spécifiques, 
chacun contenant des itinéraires (routes) et des contrôleurs pour gérer des aspects distincts de 
l'application (administrateurs, opérations communes, et joueurs).

 Configuration de l'Application
- `app = Flask(__name__)` : Crée une instance de l'application Flask.
- `app.secret_key = 'your_secret_key_here'` : Définit une clé secrète pour l'application, 
essentielle pour les fonctionnalités de session et de sécurité.
- `db = connection()` : Établit une connexion à la base de données MongoDB et stocke l'objet de 
connexion dans la variable `db`.

 Enregistrement des Blueprints
- `app.register_blueprint(admin_routes)` : Enregistre les itinéraires d'administration comme une partie de 
l'application Flask. Ces itinéraires gèrent les opérations liées à l'administration.
- `app.register_blueprint(common_routes)` : Enregistre les itinéraires communs qui contiennent des fonctionnalités 
accessibles à tous les utilisateurs de l'application, qu'ils soient administrateurs ou joueurs.
- `app.register_blueprint(player_routes)` : Enregistre les itinéraires spécifiques aux joueurs, permettant de 
gérer les opérations liées aux profils des joueurs, visualiser leurs statistiques, et autres données pertinentes.

 Démarrage de l'Application
- `if __name__ == '__main__':` : Vérifie si le script est exécuté directement (plutôt que d'être importé) pour 
démarrer l'application.
- `app.run(debug=True)` : Démarre l'application Flask en mode débogage. Le mode débogage permet de 
recharger automatiquement l'application sur les modifications du code et fournit un débogueur intégré 
en cas d'erreurs.

Le fichier `app.py` agit comme le cœur de l'application Flask, configurant l'application, connectant la base 
de données, et intégrant diverses sections de l'application via des blueprints. Le mode débogage activé 
indique que cette configuration est plutôt destinée à un environnement de développement. Pour un déploiement 
en production, il serait conseillé de désactiver le débogage et de configurer des options de serveur plus 
sécurisées.